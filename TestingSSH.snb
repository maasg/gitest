{
  "metadata" : {
    "name" : "TestingSSH",
    "user_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "auto_save_timestamp" : "1970-01-01T01:00:00.000Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : {
      "xSparkVersion" : "1.6.1",
      "xWithParquet" : "false",
      "buildTime" : "Wed Jun 08 11:52:36 CEST 2016",
      "sparkNotebookVersion" : "0.7.0-SNAPSHOT",
      "xJlineDef" : "(org.scala-lang,2.10.5)",
      "scalaVersion" : "2.10.5",
      "sbtVersion" : "0.13.8",
      "formattedShaVersion" : "Some(8009cbac3656f9410823df1afa67f8b79dec102e-SNAPSHOT)",
      "xJets3tVersion" : "0.7.1",
      "xWithHive" : "false",
      "xHadoopVersion" : "2.2.0"
    },
    "customLocalRepo" : null,
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "BDC42D19F254419E96FE449E52A10B37"
    },
    "cell_type" : "markdown",
    "source" : "## THIS is an SSH test"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D8853EF19DBD461AB4864175484C0442"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.streaming._\nimport org.apache.spark.streaming.dstream._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.streaming._\nimport org.apache.spark.streaming.dstream._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B50B2781ACDB4AE488008741BACABA7C"
    },
    "cell_type" : "code",
    "source" : "import scala.util.Random\nval rdd = sparkContext.parallelize(1 to 10).map(_ => () => Random.nextInt(10))\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.util.Random\nrdd: org.apache.spark.rdd.RDD[() => Int] = MapPartitionsRDD[2169] at map at <console>:71\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 93
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "413F243652174FCB8BFB3599EB684572"
    },
    "cell_type" : "code",
    "source" : "val ssc = new StreamingContext(sparkContext, Seconds(1))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "ssc: org.apache.spark.streaming.StreamingContext = org.apache.spark.streaming.StreamingContext@498fab96\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 114
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F7B03128112941F69556904B3A457A26"
    },
    "cell_type" : "code",
    "source" : "val dstream = new ConstantInputDStream(ssc,rdd).map(e => e())",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "dstream: org.apache.spark.streaming.dstream.DStream[Int] = org.apache.spark.streaming.dstream.MappedDStream@7de3c781\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 115
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D77288C7FAEA430982BB7702ABFD14F0"
    },
    "cell_type" : "code",
    "source" : "val keyedDstream = dstream.transform(rdd=> rdd.distinct).map(e => (e,1))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "keyedDstream: org.apache.spark.streaming.dstream.DStream[(Int, Int)] = org.apache.spark.streaming.dstream.MappedDStream@1fb61190\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 116
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "BE0A1EE6A1B64F2DA7E8989E0FC4C4AA"
    },
    "cell_type" : "code",
    "source" : "val windowed = keyedDstream.reduceByKeyAndWindow((x:Int,y:Int) => x+y, Seconds(4),Seconds(1))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "windowed: org.apache.spark.streaming.dstream.DStream[(Int, Int)] = org.apache.spark.streaming.dstream.ShuffledDStream@43dbc034\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 117
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "58BE362525E1466F9A6F6477001C0817"
    },
    "cell_type" : "code",
    "source" : "val uniqueNotInWindow = keyedDstream.join(windowed)//.transform(rdd => rdd.collect{case (k,(last, prev)) if (prev.isEmpty) => k}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "uniqueNotInWindow: org.apache.spark.streaming.dstream.DStream[(Int, (Int, Int))] = org.apache.spark.streaming.dstream.TransformedDStream@3fbe5974\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 118
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9EAA80DEB2FB42DF95CCE819D0281A62"
    },
    "cell_type" : "code",
    "source" : "val li = ul(10)\nli",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "li: notebook.front.widgets.HtmlList = <HtmlList widget>\nres160: notebook.front.widgets.HtmlList = <HtmlList widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<ul data-bind=\"foreach: value\"><li data-bind=\"html: $data\"></li><script data-this=\"{&quot;valueId&quot;:&quot;anona4eb971e18e229437ba5d265b145e10b&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId)\n    },\n    this\n  );\n});\n                            /*]]>*/</script></ul>"
      },
      "output_type" : "execute_result",
      "execution_count" : 119
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "EEE6EE21808042CC838D57608A554C1E"
    },
    "cell_type" : "code",
    "source" : "uniqueNotInWindow.foreachRDD{rdd => val data = rdd.collect\n                       val pretty = data.map{case (k,(e1,e2)) => \n                                             s\"[$k->(${e1})-(${e2})]\" //.mkString\n                                            }\n                       li.append(pretty.mkString(\",\"))\n                      }",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 120
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0508C6BB73084802AE0D95F73444B42F"
    },
    "cell_type" : "code",
    "source" : "ssc.start()",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 121
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8918506DD90245FB8F3F42443ECE7F31"
    },
    "cell_type" : "code",
    "source" : "ssc.stop(false)\n",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "DC64F358CB05474BACCC134DA3C8743F"
    },
    "cell_type" : "code",
    "source" : "val t0= new Time(System.currentTimeMillis-1000*60L)\nval t1= new Time(System.currentTimeMillis)\n\nval d = dstream.slice(t0,t1)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "t0: org.apache.spark.streaming.Time = 1465492818999 ms\nt1: org.apache.spark.streaming.Time = 1465492878999 ms\nd: Seq[org.apache.spark.rdd.RDD[Int]] = Vector(ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab852914249-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "9745043B9E604A2789BC9D64ED3FB178"
    },
    "cell_type" : "code",
    "source" : "d",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res26: Seq[org.apache.spark.rdd.RDD[Int]] = Vector(ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69, ParallelCollectionRDD[0] at parallelize at <console>:69)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon5e18e0c827c95a16d871f0355cda1927&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;852914249&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul852914249\"><li>\n              <a href=\"#tab852914249-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab852914249-1\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab852914249\"><div class=\"tab-pane\" id=\"tab852914249-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon5630b7f15d4bb2e5f4f1c0ae178e2237&quot;,&quot;dataInit&quot;:[{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;}],&quot;genId&quot;:&quot;270439570&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"data\",\"numSlices\",\"locationPrefs\",\"evidence$2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoneb4c7266107b457be87bff5c3657640d&quot;,&quot;initialValue&quot;:&quot;5&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon3143845d84656dd4b4f440f06b7b3435&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab852914249-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon9981e731e57b35adfc7e1b68431f66b1&quot;,&quot;dataInit&quot;:[{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;},{&quot;data&quot;:[1,2,3,4,5,6,7,8,9,10],&quot;numSlices&quot;:8,&quot;locationPrefs&quot;:[],&quot;evidence$2&quot;:&quot;Int&quot;}],&quot;genId&quot;:&quot;441202415&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon21d83ea790faff7ea04c010a1ae0f12b&quot;,&quot;initialValue&quot;:&quot;5&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon75c4408e435d4830e68243bb6dde528c&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "767B8F3A7BDC466BB6DD87A6F8615EED"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}