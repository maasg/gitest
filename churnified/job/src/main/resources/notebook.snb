{
  "metadata" : {
    "id" : "6797f88d-19bd-45c7-89d2-631e0df7b717",
    "name" : "churnified",
    "user_save_timestamp" : "2016-10-12T09:25:31.792Z",
    "auto_save_timestamp" : "2016-10-06T10:19:30.013Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : {
      "xSparkVersion" : "1.6.1",
      "xWithParquet" : "true",
      "buildTime" : "Mon Aug 08 17:38:15 CEST 2016",
      "sparkNotebookVersion" : "0.7.0-SNAPSHOT",
      "xJlineDef" : "(org.scala-lang,2.10.5)",
      "scalaVersion" : "2.10.5",
      "sbtVersion" : "0.13.9",
      "formattedShaVersion" : "Some(8395c2e6a7b313bfb33e349e16012c10d52ec13e-SNAPSHOT)",
      "xJets3tVersion" : "0.9.4",
      "xWithHive" : "true",
      "xHadoopVersion" : "2.7.2"
    },
    "customLocalRepo" : "/tmp/localrepo",
    "customRepos" : null,
    "customDeps" : [ "com.databricks % spark-csv_2.10 % 1.5.0" ],
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.cores.max" : "3",
      "spark.executor.memory" : "2G",
      "spark.mesos.coarse" : "true",
      "spark.default.parallelism" : "2",
      "spark.sql.parquet.compression.codec" : "snappy",
      "spark.sql.shuffle.partitions" : "64"
    },
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A0B79C1E9ADE4E1F89022CAB6A0297F0"
    },
    "cell_type" : "code",
    "source" : "val sqlContext = new org.apache.spark.sql.SQLContext(sc)\nimport sqlContext.implicits._\n\nimport org.apache.spark.sql.types._",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sqlContext: org.apache.spark.sql.SQLContext = org.apache.spark.sql.SQLContext@4c6bd55d\nimport sqlContext.implicits._\nimport org.apache.spark.sql.types._\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9A7C4B1B2CC74CC588A355344AD4CFB2"
    },
    "cell_type" : "code",
    "source" : "//val model_matrix_uri = \"hdfs://lhvbdab8.axa-be.intraxa:9000/playground/projects/churn_auto/out/modelMatrix/\"\n//val model_matrix_uri_output = \"hdfs://lhvbdab8.axa-be.intraxa:9000/playground/projects/churn_auto/out/modelMatrix/\"\n\nval sample =  \"/home/maasg/playground/data/random_forest.data\"\n\nval matrixDF = sqlContext.read\n                        .format(\"com.databricks.spark.csv\")\n                        .option(\"header\", \"true\")\n.option(\"inferSchema\", \"true\")\n                   \n                   .load(sample)\n                   .persist(org.apache.spark.storage.StorageLevel.MEMORY_AND_DISK_SER)\n                   .repartition(4)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "sample: String = /home/maasg/playground/data/random_forest.data\nmatrixDF: org.apache.spark.sql.DataFrame = [id_int: int,  any_churn_target_boolean: string,  full_churn_target_boolean: string,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CE0477855D3741E5924933D8FD31BA86"
    },
    "cell_type" : "code",
    "source" : "matrixDF.show",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "+------+-------------------------+--------------------------+-------------------+-------------------+-------------------+\n|id_int| any_churn_target_boolean| full_churn_target_boolean| A_1_count_last_int| A_2_count_last_int| A_3_count_last_int|\n+------+-------------------------+--------------------------+-------------------+-------------------+-------------------+\n|    12|                     true|                     false|               20.0|               45.0|              115.0|\n|    14|                    false|                      true|               10.0|                2.0|              111.0|\n|    15|                     true|                     false|               22.0|                4.0|              110.0|\n|    16|                    false|                      true|                5.0|                5.0|              113.0|\n|    11|                     true|                      true|               20.0|               45.0|              111.0|\n|    13|                     true|                      true|               20.0|               15.0|              118.0|\n|    17|                     true|                      true|                2.0|               45.0|              116.0|\n+------+-------------------------+--------------------------+-------------------+-------------------+-------------------+\n\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab986286172-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "CDD53E52F14C4E62BA50847F9094F1B6"
    },
    "cell_type" : "code",
    "source" : "matrixDF.schema",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res10: org.apache.spark.sql.types.StructType = StructType(StructField(id_int,IntegerType,true), StructField( any_churn_target_boolean,StringType,true), StructField( full_churn_target_boolean,StringType,true), StructField( A_1_count_last_int,DoubleType,true), StructField( A_2_count_last_int,DoubleType,true), StructField( A_3_count_last_int,DoubleType,true))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon0ac6834bd6862cc5b94deb612c62e542&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;986286172&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul986286172\"><li>\n              <a href=\"#tab986286172-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab986286172-1\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab986286172\"><div class=\"tab-pane\" id=\"tab986286172-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon4b3664420aa127bfb94af1f3d3ab377d&quot;,&quot;dataInit&quot;:[{&quot;name&quot;:&quot;id_int&quot;,&quot;dataType&quot;:&quot;IntegerType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; any_churn_target_boolean&quot;,&quot;dataType&quot;:&quot;StringType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; full_churn_target_boolean&quot;,&quot;dataType&quot;:&quot;StringType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_1_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_2_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_3_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;}],&quot;genId&quot;:&quot;980543220&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"name\",\"dataType\",\"nullable\",\"metadata\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon4e467bc9b0b2f623e4970754ea18ff83&quot;,&quot;initialValue&quot;:&quot;6&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1d754c78e100e085d00ce8f9c07d213d&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab986286172-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonbd3e9a1354f65a877f4e28c65d0b8c28&quot;,&quot;dataInit&quot;:[{&quot;name&quot;:&quot;id_int&quot;,&quot;dataType&quot;:&quot;IntegerType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; any_churn_target_boolean&quot;,&quot;dataType&quot;:&quot;StringType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; full_churn_target_boolean&quot;,&quot;dataType&quot;:&quot;StringType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_1_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_2_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;},{&quot;name&quot;:&quot; A_3_count_last_int&quot;,&quot;dataType&quot;:&quot;DoubleType&quot;,&quot;nullable&quot;:true,&quot;metadata&quot;:&quot;{}&quot;}],&quot;genId&quot;:&quot;1180112679&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anoneaa6bdacb97ac4466a64b924d194248f&quot;,&quot;initialValue&quot;:&quot;6&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonbcb93a6ce1540ac348654915640b3f3f&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab767710127-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "8C1F13860F174AF88CAA9DC08100070C"
    },
    "cell_type" : "code",
    "source" : "// matrixDF.take(50)",
    "outputs" : [ {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "045E46A55615443B85869C46E7134013"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.sql.functions._\n\nval churnedDF_tmp = matrixDF.withColumn(\"churned\", when($\" any_churn_target_boolean\" === false , 0.0).otherwise(1.0)) // any_churn_target => churned, not_churned\n                        .drop(\" full_churn_target_boolean\")\n.drop(\" any_churn_target_boolean\")\n\n\n//TODO Deal with these features : either by augmenting the number of categoricals",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.sql.functions._\nchurnedDF_tmp: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, churned: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 9
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "32D320FCD4504224824094B70A3B370B"
    },
    "cell_type" : "code",
    "source" : "val stringedColumns = churnedDF_tmp.schema.toSeq.filter(col => (col.dataType == StringType) ).map(_.name)   \n\nval numCols = churnedDF_tmp.schema.toSeq.filter(col => ( (col.name != \"churned\") && ((col.dataType == DoubleType) || (col.dataType == IntegerType)) || (col.dataType == LongType))) \n                               .map (_.name)  \n\n\n(stringedColumns.length + numCols.length)  == (churnedDF_tmp.schema.toSeq.length -1)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "stringedColumns: Seq[String] = List()\nnumCols: Seq[String] = List(id_int, \" A_1_count_last_int\", \" A_2_count_last_int\", \" A_3_count_last_int\")\nres15: Boolean = true\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "true"
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "503EAE0B270B4AA383A13BC37AB6E508"
    },
    "cell_type" : "code",
    "source" : "val fillStrMap = stringedColumns.map (s => ( s, \"unknown\")).toMap   //Replace empty strings with a full string so Encoders and Indexers don't explode\nval fillNumMap = numCols.map ( s => (s, 0)).toMap                   // TODO ==> compute averages instead of zeros",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "fillStrMap: scala.collection.immutable.Map[String,String] = Map()\nfillNumMap: scala.collection.immutable.Map[String,Int] = Map(id_int -> 0, \" A_1_count_last_int\" -> 0, \" A_2_count_last_int\" -> 0, \" A_3_count_last_int\" -> 0)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 11
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B028D7AF5FB845698678874090D9EBF8"
    },
    "cell_type" : "code",
    "source" : "val churnedDF = churnedDF_tmp.na.fill(fillStrMap)\n                             .na.fill(fillNumMap)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "churnedDF: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, churned: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1145896599-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "5BBFBEB658DC4A529A441409124FA1D9"
    },
    "cell_type" : "code",
    "source" : "churnedDF",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res19: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, churned: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div class=\"df-canvas\">\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon0bb408f7b013eb4310f8fcd6d0e804cc&quot;,&quot;partitionIndexId&quot;:&quot;anonfa4ecd1705a068c57e319a1cf5b550a0&quot;,&quot;numPartitions&quot;:1,&quot;dfSchema&quot;:{&quot;type&quot;:&quot;struct&quot;,&quot;fields&quot;:[{&quot;name&quot;:&quot;id_int&quot;,&quot;type&quot;:&quot;integer&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot; A_1_count_last_int&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot; A_2_count_last_int&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot; A_3_count_last_int&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}},{&quot;name&quot;:&quot;churned&quot;,&quot;type&quot;:&quot;double&quot;,&quot;nullable&quot;:false,&quot;metadata&quot;:{}}]}}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/dataframe','../javascripts/notebook/consoleDir'], \n      function(dataframe, extension) {\n        dataframe.call(data, this, extension);\n      }\n    );/*]]>*/</script>\n      <link rel=\"stylesheet\" href=\"/assets/stylesheets/ipython/css/dataframe.css\" type=\"text/css\"/>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "92612E5FBA084F7589906D6EE8BAEE65"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer, VectorSlicer, StandardScaler, VectorAssembler, OneHotEncoder}\nimport org.apache.spark.ml.{Pipeline, PipelineStage}\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.feature.{StringIndexer, IndexToString, VectorIndexer, VectorSlicer, StandardScaler, VectorAssembler, OneHotEncoder}\nimport org.apache.spark.ml.{Pipeline, PipelineStage}\nimport org.apache.spark.mllib.util.MLUtils\nimport org.apache.spark.ml.evaluation.MulticlassClassificationEvaluator\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "490EB66BE7A0411285629874B6BD1EEB"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.attribute.NominalAttribute\n\nval meta = NominalAttribute\n  .defaultAttr\n  .withName(\"churned\")\n  .withValues(\"0.0\", \"1.0\")\n  .toMetadata\n\n//Manually adds metadata to the label columns \nval churnedWithMetadata = churnedDF.withColumn(\"label\", $\"churned\".as(\"label\", meta)).drop(\"churned\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.attribute.NominalAttribute\nmeta: org.apache.spark.sql.types.Metadata = {\"ml_attr\":{\"vals\":[\"0.0\",\"1.0\"],\"type\":\"nominal\",\"name\":\"churned\"}}\nchurnedWithMetadata: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, label: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab2102262676-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "3576D11CD45A476692EB73459760D951"
    },
    "cell_type" : "code",
    "source" : "churnedWithMetadata.take(50)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res23: Array[org.apache.spark.sql.Row] = Array([12,20.0,45.0,115.0,1.0], [14,10.0,2.0,111.0,1.0], [15,22.0,4.0,110.0,1.0], [16,5.0,5.0,113.0,1.0], [11,20.0,45.0,111.0,1.0], [13,20.0,15.0,118.0,1.0], [17,2.0,45.0,116.0,1.0])\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonc1ab93e75f76cee6c2ba78cff063ffc6&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;2102262676&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul2102262676\"><li>\n              <a href=\"#tab2102262676-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab2102262676-1\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab2102262676\"><div class=\"tab-pane\" id=\"tab2102262676-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anone7c7030bc855318e834aa39c00adfe1c&quot;,&quot;dataInit&quot;:[{&quot;id_int&quot;:12,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:115.0,&quot;A_2_count_last_int&quot;:45.0},{&quot;id_int&quot;:14,&quot;A_1_count_last_int&quot;:10.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:111.0,&quot;A_2_count_last_int&quot;:2.0},{&quot;id_int&quot;:15,&quot;A_1_count_last_int&quot;:22.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:110.0,&quot;A_2_count_last_int&quot;:4.0},{&quot;id_int&quot;:16,&quot;A_1_count_last_int&quot;:5.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:113.0,&quot;A_2_count_last_int&quot;:5.0},{&quot;id_int&quot;:11,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:111.0,&quot;A_2_count_last_int&quot;:45.0},{&quot;id_int&quot;:13,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:118.0,&quot;A_2_count_last_int&quot;:15.0},{&quot;id_int&quot;:17,&quot;A_1_count_last_int&quot;:2.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:116.0,&quot;A_2_count_last_int&quot;:45.0}],&quot;genId&quot;:&quot;1542172871&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"id_int\",\" A_1_count_last_int\",\" A_2_count_last_int\",\" A_3_count_last_int\",\"label\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf1bd442cda9bfaa1920bc00482847e74&quot;,&quot;initialValue&quot;:&quot;7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona06cdd5cc2e6fe669f4e4b6f36de94c1&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab2102262676-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon2c1d0642037662ea0d087e88f7a85a7d&quot;,&quot;dataInit&quot;:[{&quot;id_int&quot;:12,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:115.0,&quot;A_2_count_last_int&quot;:45.0},{&quot;id_int&quot;:14,&quot;A_1_count_last_int&quot;:10.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:111.0,&quot;A_2_count_last_int&quot;:2.0},{&quot;id_int&quot;:15,&quot;A_1_count_last_int&quot;:22.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:110.0,&quot;A_2_count_last_int&quot;:4.0},{&quot;id_int&quot;:16,&quot;A_1_count_last_int&quot;:5.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:113.0,&quot;A_2_count_last_int&quot;:5.0},{&quot;id_int&quot;:11,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:111.0,&quot;A_2_count_last_int&quot;:45.0},{&quot;id_int&quot;:13,&quot;A_1_count_last_int&quot;:20.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:118.0,&quot;A_2_count_last_int&quot;:15.0},{&quot;id_int&quot;:17,&quot;A_1_count_last_int&quot;:2.0,&quot;label&quot;:1.0,&quot;A_3_count_last_int&quot;:116.0,&quot;A_2_count_last_int&quot;:45.0}],&quot;genId&quot;:&quot;1569142274&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon033c87f95b6dc2ea43739b06bcd9b47c&quot;,&quot;initialValue&quot;:&quot;7&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon53b4a0798b5e2ed16c8c291be9e5af31&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "id" : "BAD5EDB2D2A242218532265392267DCF"
    },
    "cell_type" : "markdown",
    "source" : "## Stages for features preparation"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "56BD6B71E1DD4543826A81E51FD73101"
    },
    "cell_type" : "code",
    "source" : "val catIndexer: Array[org.apache.spark.ml.PipelineStage] = stringedColumns.map(\n  cname => new StringIndexer()\n    .setInputCol(cname)\n    .setOutputCol(s\"${cname}_index\")\n    .setHandleInvalid(\"skip\")\n).toArray\n\nval vectorCols = (stringedColumns.map(cname => s\"${cname}_index\") ++ numCols).toArray\n\nval vectorAssembler = new VectorAssembler()\n                           .setInputCols(vectorCols)\n                           .setOutputCol(\"features\")\n\nval vectorIndexer = new VectorIndexer()\n                           .setInputCol(\"features\")\n                           .setOutputCol(\"indexedFeatures\")\n                           .setMaxCategories(10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "catIndexer: Array[org.apache.spark.ml.PipelineStage] = Array()\nvectorCols: Array[String] = Array(id_int, \" A_1_count_last_int\", \" A_2_count_last_int\", \" A_3_count_last_int\")\nvectorAssembler: org.apache.spark.ml.feature.VectorAssembler = vecAssembler_32a44f76b72f\nvectorIndexer: org.apache.spark.ml.feature.VectorIndexer = vecIdx_8c1a5e73a7d3\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "ADF3163DA6E54E4A8CA1CDCDBF59AD34"
    },
    "cell_type" : "code",
    "source" : "vectorIndexer",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "res26: org.apache.spark.ml.feature.VectorIndexer = vecIdx_8c1a5e73a7d3\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "vecIdx_8c1a5e73a7d3"
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A443CDE48DB445DA9FB945382800C79C"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.classification.{RandomForestClassifier, RandomForestClassificationModel}\nimport scala.util.Random\n\nval classifier = new RandomForestClassifier()\n         .setSeed(Random.nextLong())\n         .setFeaturesCol(\"features\")\n         .setLabelCol(\"label\")\n         .setPredictionCol(\"prediction\")\n         .setNumTrees(48)\n         .setImpurity(\"entropy\")\n         .setFeatureSubsetStrategy(\"auto\")\n                  \nval rfPipeline = new Pipeline().setStages(catIndexer ++ Array(vectorAssembler, classifier))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.classification.{RandomForestClassifier, RandomForestClassificationModel}\nimport scala.util.Random\nclassifier: org.apache.spark.ml.classification.RandomForestClassifier = rfc_e0d083e95f76\nrfPipeline: org.apache.spark.ml.Pipeline = pipeline_462b5a2a0542\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 19
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A145EF3CD68148FD95084B2B2819641B"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\n\n\n// We use a ParamGridBuilder to construct a grid of parameters to search over\nval paramGrid = new ParamGridBuilder()\n  .addGrid(classifier.maxBins, Array(25, 28, 32))\n  .addGrid(classifier.maxDepth, Array(4, 8, 16))\n  .addGrid(classifier.impurity, Array(\"entropy\", \"gini\"))\n  .build()\n\nval evaluator = new BinaryClassificationEvaluator()\n  .setLabelCol(\"label\")\n  //.setMetricName(\"areaUnderPR\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import org.apache.spark.ml.tuning.{CrossValidator, ParamGridBuilder}\nimport org.apache.spark.ml.evaluation.BinaryClassificationEvaluator\nparamGrid: Array[org.apache.spark.ml.param.ParamMap] = \nArray({\n\trfc_e0d083e95f76-impurity: entropy,\n\trfc_e0d083e95f76-maxBins: 25,\n\trfc_e0d083e95f76-maxDepth: 4\n}, {\n\trfc_e0d083e95f76-impurity: entropy,\n\trfc_e0d083e95f76-maxBins: 28,\n\trfc_e0d083e95f76-maxDepth: 4\n}, {\n\trfc_e0d083e95f76-impurity: entropy,\n\trfc_e0d083e95f76-maxBins: 32,\n\trfc_e0d083e95f76-maxDepth: 4\n}, {\n\trfc_e0d083e95f76-impurity: gini,\n\trfc_e0d083e95f76-maxBins: 25,\n\trfc_e0d083e95f76-maxDepth: 4\n}, {\n\trfc_e0d083e95f76-impurity: gini,\n\trfc_e0d083e95f76-maxBins: 28,\n\trfc_e0d083e95f76-maxDepth: 4\n}, {\n\trfc_e0d083e95f76-impurity: gini,\n\trfc_e0d083e95f76-maxBins: 32,\n\trfc_e0d083e95f76-maxD..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4A68D670F4484C8F81856ABF8ED6099F"
    },
    "cell_type" : "code",
    "source" : "val cv = new CrossValidator().setEstimator(rfPipeline)\n                             .setEvaluator(evaluator)\n                             .setEstimatorParamMaps(paramGrid)\n                             .setNumFolds(10)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "cv: org.apache.spark.ml.tuning.CrossValidator = cv_fc90c7c73602\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 21
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "C8180A0CB4674200B05573B9B6C9037D"
    },
    "cell_type" : "code",
    "source" : "val Array(trainingSet, testSet) = churnedWithMetadata.randomSplit(Array(0.8, 0.2))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "trainingSet: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, label: double]\ntestSet: org.apache.spark.sql.DataFrame = [id_int: int,  A_1_count_last_int: double,  A_2_count_last_int: double,  A_3_count_last_int: double, label: double]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 22
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9C4AB4C606E64008BAF8DA881668559E"
    },
    "cell_type" : "code",
    "source" : "val fittedPipeline = cv.fit(trainingSet)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "fittedPipeline: org.apache.spark.ml.tuning.CrossValidatorModel = cv_fc90c7c73602\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 23
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "5EC36BC6FF6B4052898873585B40451D"
    },
    "cell_type" : "code",
    "source" : "val model_output = \"/tmp/data/churn_\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "model_output: String = /tmp/data/churn_\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 25
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "28CCCDABAB404C009593C7AAB73F20F7"
    },
    "cell_type" : "markdown",
    "source" : "sparkContext.parallelize(Seq(fittedPipeline), 1).saveAsObjectFile(model_output)\n\n//Note : to reload the model : sparkContext.objectFile[org.apache.spark.ml.classification.CrossValidatorModel](model_output).first\n// Then predict using : dtree.predict( model.predict( ... ))"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "0E30F6A5768B4DE881250218705CE9A5"
    },
    "cell_type" : "code",
    "source" : "val model_output = \"/tmp/adalog/modelout\"\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "model_output: String = /tmp/adalog/modelout\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 26
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "8018A45B21564247B501733A718D5370",
      "extra" : {
        "fittedPipeline" : "org.apache.spark.ml.tuning.CrossValidatorModel",
        "inputs" : {
          "resolved" : [ ],
          "unresolved" : [ ]
        }
      }
    },
    "cell_type" : "output",
    "source" : "model_output+(System.currentTimeMillis.toString.drop(5))",
    "output" : {
      "type" : "model",
      "var" : "fittedPipeline",
      "extra" : {
        "value" : "org.apache.spark.ml.tuning.CrossValidatorModel"
      }
    },
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Model\nLocated: /tmp/adalog/modelout08860961\nModel:  fittedPipeline (org.apache.spark.ml.tuning.CrossValidatorModel)\n{\"type\":\"model\",\"var\":\"fittedPipeline\",\"extra\":{\"value\":\"org.apache.spark.ml.tuning.CrossValidatorModel\"}}\nNone\noutput-8018A45B21564247B501733A718D5370: String = /tmp/adalog/modelout08860961\nres36: notebook.front.widgets.adst.ModelOutputWidget = <ModelOutputWidget widget>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;modelVar&quot;:&quot;fittedPipeline&quot;,&quot;inputs&quot;:{&quot;resolved&quot;:[],&quot;unresolved&quot;:[]},&quot;modelName&quot;:&quot;org.apache.spark.ml.tuning.CrossValidatorModel&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/adst/output/modelOutput'], \n      function(modelOutput) {\n        modelOutput.call(data, this);\n      }\n    );/*]]>*/</script>\n    </div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 27
    } ]
  }, {
    "metadata" : {
      "id" : "5171E353D9AA495197AD1AF3F013DAB5"
    },
    "cell_type" : "markdown",
    "source" : "## Metrics Evaluation"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CC4E5A07AE9A4C5D8916109B2F8A3D4D"
    },
    "cell_type" : "code",
    "source" : "val predictions = fittedPipeline.transform(testSet)\nval accuracy = evaluator.evaluate(predictions)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "FD3A048F937640B4922A8880F6D8E8EC"
    },
    "cell_type" : "code",
    "source" : "println (\"accuracy : \" + accuracy)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "792366F9B03F45FB80332BD19945935A"
    },
    "cell_type" : "markdown",
    "source" : "## Bin class metrics"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "40F206F6FB73480880AA3AC6EE57BB20"
    },
    "cell_type" : "code",
    "source" : "import org.apache.spark.mllib.evaluation.BinaryClassificationMetrics\n\nval predictionsAndLabels = predictions.select($\"prediction\", $\"label\").rdd.map( k => (k.getDouble(0), k.getDouble(1)))\nval metrics_rdd = new BinaryClassificationMetrics(predictionsAndLabels)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "id" : "B7B92E9C0714404C83AEE313D4B33892"
    },
    "cell_type" : "markdown",
    "source" : "## Precision Recall Curve plots"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F7305C927E1E4F0688E361B2B1B0F282"
    },
    "cell_type" : "code",
    "source" : "println ( \"ROC under PR : \" + metrics_rdd.areaUnderPR)\nprintln (\"ROC Curve : \" + metrics_rdd.areaUnderROC)",
    "outputs" : [ ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "729BF461A09047C0A130D5DEE6177BC3"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}