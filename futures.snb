{
  "metadata" : {
    "id" : "2d86ed87-33af-4cc8-97fd-4e547f71c465",
    "name" : "futures",
    "user_save_timestamp" : "2016-09-11T17:58:24.686Z",
    "auto_save_timestamp" : "2016-09-11T17:58:24.686Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : {
      "xSparkVersion" : "1.6.1",
      "xWithParquet" : "false",
      "buildTime" : "Fri Sep 09 15:45:04 CEST 2016",
      "sparkNotebookVersion" : "0.7.0-SNAPSHOT",
      "xJlineDef" : "(org.scala-lang,2.10.5)",
      "scalaVersion" : "2.10.5",
      "sbtVersion" : "0.13.9",
      "formattedShaVersion" : "Some(3a3dcb5b855b810cda6e799bb8bbfded82f40fec-SNAPSHOT)",
      "xJets3tVersion" : "0.7.1",
      "xWithHive" : "false",
      "xHadoopVersion" : "2.2.0"
    },
    "customLocalRepo" : "/tmp/localrepo",
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.executor.memory" : "4G"
    },
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "1AB2D9728880468D9A4B22C9B7F24232"
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.{Future, Promise}\nimport scala.util.{Success, Failure}\nimport scala.concurrent.ExecutionContext.Implicits.global\ndef failFast[T](futures: Seq[Future[T]]): Future[Seq[T]] = {\n  val promise = Promise[Seq[T]]\n  futures.foreach{f => f.onFailure{case ex => promise.failure(ex)}}\n  val res = Future.sequence(futures)\n  promise.completeWith(res).future\n}\n  \n  ",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.concurrent.{Future, Promise}\nimport scala.util.{Success, Failure}\nimport scala.concurrent.ExecutionContext.Implicits.global\nfailFast: [T](futures: Seq[scala.concurrent.Future[T]])scala.concurrent.Future[Seq[T]]\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 7
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "76C6E224537A43B484A0C9D1A345DE38"
    },
    "cell_type" : "code",
    "source" : "import scala.util.Try\n\ndef resilientTime[T](t: =>T):(Try[T], Long) = {\n  val t0 = System.currentTimeMillis\n  val res = Try(t)\n  (res, System.currentTimeMillis-t0)\n}\n  ",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.util.Try\nresilientTime: [T](t: => T)(scala.util.Try[T], Long)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 16
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "F12302858350471B9A429A58FE06BDC4"
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nval f1 = Future[Int]{Thread.sleep(2000); throw new Exception(\"boom\")}\nval f2 = Future[Int]{Thread.sleep(5000); 42}\nval f3 = Future[Int]{Thread.sleep(10000); 101}\nval res = failFast(Seq(f1,f2,f3))\n\n\nresilientTime(Await.result(res, 10.seconds))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nf1: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@55475a1a\nf2: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@24e85c44\nf3: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@77ff40ab\nres: scala.concurrent.Future[Seq[Int]] = scala.concurrent.impl.Promise$DefaultPromise@223952e7\nres23: (scala.util.Try[Seq[Int]], Long) = (Failure(java.lang.Exception: boom),1998)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(Failure(java.lang.Exception: boom),1998)"
      },
      "output_type" : "execute_result",
      "execution_count" : 17
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "772BF75E32BD412D8793E697906B3460"
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nval f1 = Future[Int]{Thread.sleep(2000); throw new Exception(\"boom\")}\nval f2 = Future[Int]{Thread.sleep(5000); 42}\nval f3 = Future[Int]{Thread.sleep(10000); 101}\nval res = failFast(Seq(f3,f2,f1))\n\n\nresilientTime(Await.result(res, 10.seconds))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nf1: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@35a7cb38\nf2: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@131394d8\nf3: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@24b91d37\nres: scala.concurrent.Future[Seq[Int]] = scala.concurrent.impl.Promise$DefaultPromise@798cbceb\nres25: (scala.util.Try[Seq[Int]], Long) = (Failure(java.lang.Exception: boom),1998)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(Failure(java.lang.Exception: boom),1998)"
      },
      "output_type" : "execute_result",
      "execution_count" : 18
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "7DF5D329882F4DBE9E390FD40B0C7196"
    },
    "cell_type" : "code",
    "source" : "val f1 = Future[Int]{Thread.sleep(2000); throw new Exception(\"boom\")}\nval f2 = Future[Int]{Thread.sleep(5000); 42}\nval f3 = Future[Int]{Thread.sleep(10000); 101}\nval seq = Seq(f3,f2,f1)\n\nresilientTime(Await.result(Future.sequence(seq), 10.seconds))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "f1: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@2eb8a74\nf2: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@51b6dcfb\nf3: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@7804129a\nseq: Seq[scala.concurrent.Future[Int]] = List(scala.concurrent.impl.Promise$DefaultPromise@7804129a, scala.concurrent.impl.Promise$DefaultPromise@51b6dcfb, scala.concurrent.impl.Promise$DefaultPromise@2eb8a74)\nres29: (scala.util.Try[Seq[Int]], Long) = (Failure(java.lang.Exception: boom),10000)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "(Failure(java.lang.Exception: boom),10000)"
      },
      "output_type" : "execute_result",
      "execution_count" : 20
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "presentation" : {
        "tabs_state" : "{\n  \"tab_id\": \"#tab1636255717-0\"\n}",
        "pivot_chart_state" : "{\n  \"hiddenAttributes\": [],\n  \"menuLimit\": 200,\n  \"cols\": [],\n  \"rows\": [],\n  \"vals\": [],\n  \"exclusions\": {},\n  \"inclusions\": {},\n  \"unusedAttrsVertical\": 85,\n  \"autoSortUnusedAttrs\": false,\n  \"inclusionsInfo\": {},\n  \"aggregatorName\": \"Count\",\n  \"rendererName\": \"Table\"\n}"
      },
      "id" : "24E61D10B6BA429C864223F22AC808DB"
    },
    "cell_type" : "code",
    "source" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nval f1 = Future[Int]{Thread.sleep(2000); 1}\nval f2 = Future[Int]{Thread.sleep(5000); 42}\nval f3 = Future[Int]{Thread.sleep(10000); 101}\nval res = failFast(Seq(f1,f2,f3))\n\nAwait.result(res, 10.seconds)\n",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "import scala.concurrent.duration._\nimport scala.concurrent.Await\nf1: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@7e57e216\nf2: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@442a1afe\nf3: scala.concurrent.Future[Int] = scala.concurrent.impl.Promise$DefaultPromise@4a94331\nres: scala.concurrent.Future[Seq[Int]] = scala.concurrent.impl.Promise$DefaultPromise@cbd9768\nres17: Seq[Int] = List(1, 42, 101)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : "<div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon84aa5f3a80a62c0b94b521066547e7f1&quot;,&quot;dataInit&quot;:[],&quot;genId&quot;:&quot;1636255717&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tabs'], \n      function(playground, _magictabs) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictabs,\n    \"o\": {}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <div>\n        <ul class=\"nav nav-tabs\" id=\"ul1636255717\"><li>\n              <a href=\"#tab1636255717-0\"><i class=\"fa fa-table\"/></a>\n            </li><li>\n              <a href=\"#tab1636255717-1\"><i class=\"fa fa-dot-circle-o\"/></a>\n            </li><li>\n              <a href=\"#tab1636255717-2\"><i class=\"fa fa-line-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1636255717-3\"><i class=\"fa fa-bar-chart\"/></a>\n            </li><li>\n              <a href=\"#tab1636255717-4\"><i class=\"fa fa-cubes\"/></a>\n            </li></ul>\n\n        <div class=\"tab-content\" id=\"tab1636255717\"><div class=\"tab-pane\" id=\"tab1636255717-0\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonc82852dde021b3395d72d99698c09557&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:42},{&quot;_1&quot;:2,&quot;_2&quot;:101}],&quot;genId&quot;:&quot;1438435290&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/tableChart'], \n      function(playground, _magictableChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magictableChart,\n    \"o\": {\"headers\":[\"_1\",\"_2\"],\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon426d4263ae64565c47835ea6165bd955&quot;,&quot;initialValue&quot;:&quot;3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona47a6b65679f15b1ebd6f956bf8fb139&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1636255717-1\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anonb3692081b867a225206180667017c924&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:42},{&quot;_1&quot;:2,&quot;_2&quot;:101}],&quot;genId&quot;:&quot;1846923021&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/scatterChart'], \n      function(playground, _magicscatterChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicscatterChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonf2674eafac8a43025ea94c6cb727f3a1&quot;,&quot;initialValue&quot;:&quot;3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon410360f71c1d64e58f2b7a4120193b66&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1636255717-2\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon1a097bf6eb7308ca3c7a418bf83ba5b1&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:42},{&quot;_1&quot;:2,&quot;_2&quot;:101}],&quot;genId&quot;:&quot;2040181587&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/lineChart'], \n      function(playground, _magiclineChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magiclineChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anonc0a23c58b1d1e50bf4b75321f91f3411&quot;,&quot;initialValue&quot;:&quot;3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon1074ceb55103497b2d909d5d6b8502d8&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1636255717-3\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon2e7ffc1c7ea9278848ce46c8bfa9835b&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:42},{&quot;_1&quot;:2,&quot;_2&quot;:101}],&quot;genId&quot;:&quot;1591697985&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/barChart'], \n      function(playground, _magicbarChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicbarChart,\n    \"o\": {\"x\":\"_1\",\"y\":\"_2\",\"width\":600,\"height\":400}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anona63b8c18146a47307c1acf73dd50cb6c&quot;,&quot;initialValue&quot;:&quot;3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon82a5ee1511252283059707a4ec5effb8&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div><div class=\"tab-pane\" id=\"tab1636255717-4\">\n            <div>\n      <script data-this=\"{&quot;dataId&quot;:&quot;anon6ed0f01f761f776f54855a3dba17272c&quot;,&quot;dataInit&quot;:[{&quot;_1&quot;:0,&quot;_2&quot;:1},{&quot;_1&quot;:1,&quot;_2&quot;:42},{&quot;_1&quot;:2,&quot;_2&quot;:101}],&quot;genId&quot;:&quot;219742759&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/req(['../javascripts/notebook/playground','../javascripts/notebook/magic/pivotChart'], \n      function(playground, _magicpivotChart) {\n        // data ==> data-this (in observable.js's scopedEval) ==> this in JS => { dataId, dataInit, ... }\n        // this ==> scope (in observable.js's scopedEval) ==> this.parentElement ==> div.container below (toHtml)\n\n        playground.call(data,\n                        this\n                        ,\n                        {\n    \"f\": _magicpivotChart,\n    \"o\": {\"width\":600,\"height\":400,\"derivedAttributes\":{},\"extraOptions\":{}}\n  }\n  \n                        \n                        \n                      );\n      }\n    );/*]]>*/</script>\n    <div>\n      <span class=\"chart-total-item-count\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon5eb1937608a5fa8040aa3ca6eb7c1a4c&quot;,&quot;initialValue&quot;:&quot;3&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p> entries total</span>\n      <span class=\"chart-sampling-warning\"><p data-bind=\"text: value\"><script data-this=\"{&quot;valueId&quot;:&quot;anon4928bd06d7ca4d63ca8a9da46ab286f6&quot;,&quot;initialValue&quot;:&quot;&quot;}\" type=\"text/x-scoped-javascript\">/*<![CDATA[*/\nreq(\n['observable', 'knockout'],\nfunction (O, ko) {\n  ko.applyBindings({\n      value: O.makeObservable(valueId, initialValue)\n    },\n    this\n  );\n});\n        /*]]>*/</script></p></span>\n      <div>\n      </div>\n    </div></div>\n            </div></div>\n      </div>\n    </div></div>"
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "4F0164E2840641B688CED60E15200C06"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}