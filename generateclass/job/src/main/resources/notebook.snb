{
  "metadata" : {
    "id" : "ed8deb22-e768-4cbd-860d-a83a5cdb460b",
    "name" : "generateclass",
    "user_save_timestamp" : "2016-12-01T15:51:39.987Z",
    "auto_save_timestamp" : "2016-12-01T15:51:39.987Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : {
      "xSparkVersion" : "1.6.1",
      "xWithParquet" : "false",
      "buildTime" : "Thu Dec 01 15:49:25 CET 2016",
      "sparkNotebookVersion" : "0.7.0-SNAPSHOT",
      "xJlineDef" : "(org.scala-lang,2.10.5)",
      "scalaVersion" : "2.10.5",
      "sbtVersion" : "0.13.9",
      "formattedShaVersion" : "Some(bc2c5f8bf16d6d8d2cbaa2fac8c1136c839d4b95-SNAPSHOT)",
      "xJets3tVersion" : "0.7.1",
      "xWithHive" : "false",
      "xHadoopVersion" : "2.2.0"
    },
    "customLocalRepo" : "/tmp/localrepo",
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.executor.memory" : "4G"
    },
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9F9DEDD105BA4FD185F315938192B4A9"
    },
    "cell_type" : "code",
    "source" : "class Helper(base: String) {\n  def upper(str: String) = base + str\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Helper\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 1
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3CFFFCDAC6A643288E82709E74DC2508"
    },
    "cell_type" : "code",
    "source" : "case class Caser(start:Int, end:Int)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "defined class Caser\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "3F5D5253B0154E97A5410FB29717A692"
    },
    "cell_type" : "code",
    "source" : "val starter = 1 to 100\nval ender = 1 to 50\nval seq  = for { \n  i <- starter\n  j <- ender\n} yield {\n  Caser(i,j)\n}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "starter: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)\nender: scala.collection.immutable.Range.Inclusive = Range(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50)\nseq: scala.collection.immutable.IndexedSeq[Caser] = Vector(Caser(1,1), Caser(1,2), Caser(1,3), C..."
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4860FADC962F420485BA5EDBF48D4735"
    },
    "cell_type" : "code",
    "source" : "val df = sparkContext.parallelize(seq)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "df: org.apache.spark.rdd.RDD[Caser] = ParallelCollectionRDD[0] at parallelize at <console>:68\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 6
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D1AAA5417F0749DF8A9EF06D5227BCAA"
    },
    "cell_type" : "code",
    "source" : "val summed = df.map{case Caser(x,y) => x+y}.sum",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "summed: Double = 380000.0\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "68CE547B73C34FD78D0C2AB40F24B72F"
    },
    "cell_type" : "code",
    "source" : "println(s\"summed: $summed\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "summed: 380000.0\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 10
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : true,
      "id" : "F32839153A34427AB8565A4EA91BAB09"
    },
    "cell_type" : "code",
    "source" : "",
    "outputs" : [ ]
  } ],
  "nbformat" : 4
}