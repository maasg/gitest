{
  "metadata" : {
    "id" : "e62714e9-ebf6-4e6e-807b-92fe2acb7a9c",
    "name" : "helloworld",
    "user_save_timestamp" : "2016-10-19T15:30:22.041Z",
    "auto_save_timestamp" : "2016-10-19T15:30:22.041Z",
    "language_info" : {
      "name" : "scala",
      "file_extension" : "scala",
      "codemirror_mode" : "text/x-scala"
    },
    "trusted" : true,
    "sparkNotebook" : {
      "xSparkVersion" : "1.6.1",
      "xWithParquet" : "false",
      "buildTime" : "Wed Oct 19 11:48:30 CEST 2016",
      "sparkNotebookVersion" : "0.7.0-SNAPSHOT",
      "xJlineDef" : "(org.scala-lang,2.10.5)",
      "scalaVersion" : "2.10.5",
      "sbtVersion" : "0.13.9",
      "formattedShaVersion" : "Some(63c7f945f5054d1ee318506e03f331b24ad94ca0-SNAPSHOT)",
      "xJets3tVersion" : "0.7.1",
      "xWithHive" : "false",
      "xHadoopVersion" : "2.2.0"
    },
    "customLocalRepo" : "/tmp/localrepo",
    "customRepos" : null,
    "customDeps" : null,
    "customImports" : null,
    "customArgs" : null,
    "customSparkConf" : {
      "spark.executor.memory" : "4G"
    },
    "customVars" : null
  },
  "cells" : [ {
    "metadata" : {
      "id" : "5C8580B48B8C405D9CACB4E00C2883EC"
    },
    "cell_type" : "markdown",
    "source" : "# Hello World"
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "4D106591454A485E8B3177808537A13C"
    },
    "cell_type" : "code",
    "source" : "val salutation = Seq(\"hello\", \"hi\", \"hola\", \"bonjour\", \"hallo\", \"ciao\", \"saluton\", \"hei\", \"hoi\", \"kaixo\", \"zdravo\")\nval subjects = Seq(\"world\", \"mundo\", \"mundi\", \"monde\", \"wereld\")",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "salutation: Seq[String] = List(hello, hi, hola, bonjour, hallo, ciao, saluton, hei, hoi, kaixo, zdravo)\nsubjects: Seq[String] = List(world, mundo, mundi, monde, wereld)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 2
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "D2664A3E55C74AAA832A8B0BD098C69E"
    },
    "cell_type" : "code",
    "source" : "val isFrench:String => Boolean = s => s==\"bonjour\" || s==\"monde\"",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "isFrench: String => Boolean = <function1>\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 3
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "9C4DA32CF7EB420095408BC96847FEBE"
    },
    "cell_type" : "code",
    "source" : "val r1 = sparkContext.parallelize(salutation)\nval r2 = sparkContext.parallelize(subjects)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "r1: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[0] at parallelize at <console>:64\nr2: org.apache.spark.rdd.RDD[String] = ParallelCollectionRDD[1] at parallelize at <console>:65\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 4
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "CA473EFBE90C496187B144D69E1F650A"
    },
    "cell_type" : "code",
    "source" : "val combs = r1.cartesian(r2)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "combs: org.apache.spark.rdd.RDD[(String, String)] = CartesianRDD[2] at cartesian at <console>:68\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 5
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "359C42C4B9774EAF9AC40D0889A929C7"
    },
    "cell_type" : "code",
    "source" : "println(\"=== Combinations ===\")\nprintln(combs.toDebugString)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "=== Combinations ===\n(16) CartesianRDD[2] at cartesian at <console>:68 []\n |   ParallelCollectionRDD[0] at parallelize at <console>:64 []\n |   ParallelCollectionRDD[1] at parallelize at <console>:65 []\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 12
    } ]
  }, {
    "metadata" : {
      "id" : "2721567D133644BFBB404B2A9FC7D381"
    },
    "cell_type" : "markdown",
    "source" : "## Retrieve only the French combinations "
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "A5737A7CF8524978933D129311CEF302"
    },
    "cell_type" : "code",
    "source" : "val frenchCombo = combs.filter{case (sal,sub) => isFrench(sal) && isFrench(sub)}",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "frenchCombo: org.apache.spark.rdd.RDD[(String, String)] = MapPartitionsRDD[4] at filter at <console>:72\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 8
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "B905F6D0CB4A40EABB23E190B077C44E"
    },
    "cell_type" : "code",
    "source" : "println(\"=== French Combo ===\")\nprintln(frenchCombo.toDebugString)",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "=== French Combo ===\n(16) MapPartitionsRDD[4] at filter at <console>:72 []\n |   CartesianRDD[2] at cartesian at <console>:68 []\n |   ParallelCollectionRDD[0] at parallelize at <console>:64 []\n |   ParallelCollectionRDD[1] at parallelize at <console>:65 []\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 13
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "E44B742ED3824E158F54E370571F6375"
    },
    "cell_type" : "code",
    "source" : "val result = frenchCombo.collect",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "result: Array[(String, String)] = Array((bonjour,monde))\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 14
    } ]
  }, {
    "metadata" : {
      "trusted" : true,
      "input_collapsed" : false,
      "collapsed" : false,
      "id" : "84613BE29C2D4BB397C45313D0D0A502"
    },
    "cell_type" : "code",
    "source" : "println(\"Result\")\nprintln(result.mkString(\",\"))",
    "outputs" : [ {
      "name" : "stdout",
      "output_type" : "stream",
      "text" : "Result\n(bonjour,monde)\n"
    }, {
      "metadata" : { },
      "data" : {
        "text/html" : ""
      },
      "output_type" : "execute_result",
      "execution_count" : 15
    } ]
  } ],
  "nbformat" : 4
}